#!/bin/bash

source utilities

function resolv(){
    case "$1" in
	'Main')
	    sudo -A systemctl stop dnscrypt-proxy.service &&
		sudo -A chattr -i /etc/resolv.conf &&
		sudo -A cp /etc/resolv.conf.main /etc/resolv.conf &&
		sudo -A chattr +i /etc/resolv.conf &&
		notify 'Resolv Changed';;
	'IHU')
	    sudo -A systemctl stop dnscrypt-proxy.service &&
		sudo -A chattr -i /etc/resolv.conf &&
		sudo -A cp /etc/resolv.conf.ihu /etc/resolv.conf &&
		sudo -A chattr +i /etc/resolv.conf &&
		notify 'Resolv Changed';;
	'Dynamic')
	    sudo -A systemctl stop dnscrypt-proxy.service &&
		sudo -A chattr -i /etc/resolv.conf &&
		sudo -A rm /etc/resolv.conf &&
		sudo -A resolvconf -u &&
		notify 'Resolv Changed';;
	'Encrypted')
	    sudo -A systemctl start dnscrypt-proxy.service &&
		sudo -A chattr -i /etc/resolv.conf &&
		sudo -A cp /etc/resolv.conf.encrypt /etc/resolv.conf &&
		sudo -A chattr +i /etc/resolv.conf &&
		notify 'Resolv Changed';;
	'Mode')
	    ans="$(head --lines=1 /etc/resolv.conf)"
	    if echo $ans | grep "# Generated by resolvconf"; then
		ans='dynamic'
	    else
		ans="$(echo $ans | cut -d' ' -f2)"
	    fi
	    notify no-id "Resolv: $ans";;
    esac
}

function vpn(){
    location="/home/dimitris/.config/vpn/"
    options=""
    
    cd "$location"
    
    for file in *; do
	options+="$file"
	options+="\n"
    done
    
    option="$(menu 'Which VPN' "$options" 'entry.rasi')"
    
    [[ $option != "" ]] && xterm -background black -foreground white -e "cd $location && sudo -A openvpn '$option'"
}

function control_panel(){
    wifi=`ifconfig | grep '^wl' > /dev/null && echo  || echo ""`
    bluetooth=`systemctl status bluetooth.service > /dev/null && echo  || echo ""`
    ethernet=`ifconfig | grep '^enp' > /dev/null && echo  || echo ""`
    dns=`head --lines=1 /etc/hosts | grep '# DNS blocking' > /dev/null && echo  || echo ""`
    resolve=`head --lines=1 /etc/resolv.conf | grep '# Generated by resolvconf' > /dev/null && echo Dynamic || echo $(head --lines=1 /etc/resolv.conf | cut -d' ' -f2)`

    case $(menu 'Panel' "$wifi\n$bluetooth\n$ethernet\n$dns\n$resolve\n" 'panel.rasi') in
	"")
	    sudo -A pkill wpa_supplicant
	    rfkill block wifi &&
		sudo -A ip link set wlp0s26u1u6 down &&
		notify 'Wifi disabled';;
	"")
	    rfkill unblock wifi &&
		sudo -A ip link set wlp0s26u1u6 up &&
		sudo -A wpa_supplicant -B -c /etc/wpa_supplicant/wpa_supplicant.conf -i wlp0s26u1u6 &&
		sudo -A dhcpcd &&
		notify 'Wifi enabled';;
	"")
	    sudo -A systemctl stop bluetooth &&
		rfkill block bluetooth &&
		notify 'Bluetooth disabled' &&
		pkill blueberry;;
	"")
	    sudo -A systemctl start bluetooth &&
		rfkill unblock bluetooth &&
		notify 'Bluetooth enabled' &&
		blueberry &;;
	"")
	    sudo -A ip link set down dev enp3s0 &&
		notify 'Ethernet disabled';;
	"")
	    sudo -A ip link set up dev enp3s0 &&
		notify 'Ethernet enabled';;
	"")
	    sudo -A chattr -i /etc/hosts &&
		sudo -A rm /etc/hosts &&
		sudo -A touch /etc/hosts &&
		sudo -A chattr +i /etc/hosts &&
		notify 'DNS blocking disabled';;
	"")
	    sudo -A chattr -i /etc/hosts &&
		sudo -A cp /etc/hosts.backup /etc/hosts &&
		sudo -A chattr +i /etc/hosts &&
		notify 'DNS blocking enabled';;
	'')
	    case $(menu '' 'on\nonl\nonld\noff\npanic\nmode' 'entry.rasi') in
		'on')
		    sudo -A firewall on &&
			notify 'Mode changed';;
		'onl')
		    sudo -A firewall onL &&
			notify 'Mode changed';;
		'onld')
		    sudo -A firewall onLD &&
			notify 'Mode changed';;
		'off')
		    sudo -A firewall off &&
			notify 'Mode changed';;
		'panic')
		    sudo -A firewall panic &&
			notify 'Mode changed';;
		'mode')
		    notify "$(sudo -A firewall | head --lines=1)"
	    esac;;
	"");;
	*)
	    case $(menu 'Mode:' 'Main\nIHU\nDynamic\nEncrypted' 'entry.rasi') in
		'Main')
		    resolv Main;;
		'IHU')
		    resolv IHU;;
		'Dynamic')
		    resolv Dynamic;;
		'Encrypted')
		    resolv Encrypted;;
	    esac;;
    esac
}

function actions_power(){
    case $(menu 'Actions/Power' '\n\n\nﰇ\n\n\n' 'panel.rasi') in
	'')
	    lock --bg;;
	'')
	    case $(menu 'Sleep' 'No\nYes' 'entry.rasi') in
		'Yes')
		    if (curl 192.168.123.200 | grep -e '?comRelay3=on') >/dev/null; then
			(curl 192.168.123.200/'?comRelay3=on') >/dev/null &&
			    lock --bg &&
			    systemctl suspend
			sleep 1 &&
			    (curl 192.168.123.200 | grep -e '?comRelay3=off') >/dev/null &&
			    (curl 192.168.123.200/'?comRelay3=off') >/dev/null
		    else
			lock --bg &&
			    systemctl suspend
		    fi;;
	    esac;;
	'')
	    case $(menu 'Hibernate' 'No\nYes' 'entry.rasi') in
		'Yes')
		    lock --bg &&
			systemctl hibernate;;
	    esac;;
	'ﰇ')
	    case $(menu 'Reboot' 'No\nYes' 'entry.rasi') in
		'Yes')
		    reboot;;
	    esac;;
	'')
	    case $(menu 'Poweroff' 'No\nYes' 'entry.rasi') in
		'Yes')
		    poweroff;;
	    esac;;
	'')
	    vpn;;
	'')
	    rhythmbox & disown %rhythmbox
	    telegram-desktop & disown %telegram-desktop
	    com.discordapp.Discord & disown com.discordapp.Discord
	    com.slack.Slack &
	    syncthing-gtk & disown %syncthing-gtk
	    gnome-calendar & disown %gnome-calendar
	    chromium --force-device-scale-factor=1 --user-data-dir=.config/chromium-for-notion/ --app=https://notion.so &
	    chromium --force-device-scale-factor=1 --user-data-dir=.config/chromium-for-notion/ --app=https://trello.com;;
	'')
	    xrandr | egrep 'HDMI-1 connected .* [[:digit:]]+' &&
		(xrandr --output HDMI-1 --off &&
		     xrandr --output DVI-I-1 --auto
		 xmonad --restart) ||
		    (xrandr --output HDMI-1 --auto &&
			 xrandr --output DVI-I-1 --off
		     xmonad --restart &&
			 sleep 1 &&
			 xrandr --output HDMI-1 --primary);;
    esac
}

function services(){
    ssh=`systemctl status sshd > /dev/null && echo SSH || echo SSH`
    vftp=`systemctl status vsftpd > /dev/null && echo VFTP || echo VFTP`
    emby=`systemctl status emby-server.service > /dev/null && echo Emby || echo "Emby"`
    mic=`pactl list | grep loopback > /dev/null && echo MIC || echo MIC`
    
    case $(menu 'Services' "$ssh\n$vftp\n$emby\n$mic" 'entry.rasi') in
	'SSH')
	    sudo -A systemctl stop sshd &&
		sudo -A firewall onL &&
		notify "SSHD disabled";;
	'SSH')
	    sudo -A systemctl start sshd &&
		sudo -A firewall onLD &&
		notify "SSHD enabled";;
	'VFTP')
	    sudo -A systemctl stop vsftpd &&
		sudo -A firewall onL &&
		notify "VFTP disabled";;
	'VFTP')
	    sudo -A systemctl start vsftpd &&
		sudo -A firewall onLD &&
		notify "VFTP enabled";;
	'Emby')
	    sudo -A systemctl stop emby-server.service &&
		notify "Emby disabled";;
	'Emby')
	    sudo -A systemctl start emby-server.service &&
		notify "Emby enabled";;
	'MIC')
		pactl unload-module module-loopback &&
		    notify "MIC disabled";;
	'MIC')
		pactl load-module module-loopback latency_msec=1 &&
		    notify "MIC enabled";;
    esac
}

function settings(){
    case $(menu 'Settings' 'Wallpaper\nWallpaper(Scale)\nChange Color\nLock Screen' 'entry.rasi') in
	'Wallpaper')
	    wallpaper=`cd ~/Pictures && find Wallpapers -type f | sed 's/^Wallpapers.//g'`
	    wallpaper=`menu 'Select wallpaper' "$wallpaper" 'entry.rasi'` &&
		feh --bg-fill ~/Pictures/Wallpapers/"$wallpaper";;
	'Wallpaper(Scale)')
	    wallpaper=`cd ~/Pictures && find Wallpapers -type f | sed 's/^Wallpapers.//g'`
	    wallpaper=`menu 'Select wallpaper' "$wallpaper" 'entry.rasi'` &&
		feh --bg-scale ~/Pictures/Wallpapers/"$wallpaper";;
	'Change Color')
	    wallpaper=`cd ~/Pictures && find Wallpapers -type f | sed 's/^Wallpapers.//g'`
	    wallpaper=`menu 'Select wallpaper' "$wallpaper" 'entry.rasi'` &&
		change-color ~/Pictures/Wallpapers/"$wallpaper";;
	'Lock Screen')
	    wallpaper=`cd ~/Pictures && find Wallpapers -type f | sed 's/^Wallpapers.//g'`
	    wallpaper=`menu 'Select wallpaper' "$wallpaper" 'entry.rasi'` &&
		echo "$HOME/Pictures/Wallpapers/$wallpaper" > ~/.lockbg;;
    esac
}

# Main menu
case $(menu 'Neos' 'Control Panel\nActions/Power\nServices\nSettings' 'menu.rasi') in
    'Control Panel')
	control_panel;;
    'Actions/Power')
	actions_power``;;
    'Services')
	services;;
    'Settings')
	settings;;
esac

