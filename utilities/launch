#!/bin/sh

help="Usage: launch
Simple launch menu with rofi

Options:
	-h help"

export SUDO_ASKPASS=`which password`

function control_panel {
    wifi=`ifconfig | grep '^wl' > /dev/null && echo "Wifi " || echo "Wifi "`
    bluetooth=`systemctl status bluetooth.service > /dev/null && echo "Bluetooth " || echo "Bluetooth "`
    ethernet=`ifconfig | grep '^enp' > /dev/null && echo "Ethernet " || echo "Ethernet "`
    dns=`head --lines=1 /etc/hosts | grep '# DNS blocking' > /dev/null && echo "DNS Blocking " || echo "DNS Blocking "`
    resolve=`head --lines=1 /etc/resolv.conf | grep '# Generated by resolvconf' > /dev/null && echo Dynamic || echo $(head --lines=1 /etc/resolv.conf | cut -d' ' -f2)`

    case "$(menu 'panel.rasi' 'Panel' "$wifi\n$bluetooth\n$ethernet\n$dns\n$resolve\nFirewall")" in
	"Wifi ")
	    sudo -A pkill wpa_supplicant
	    sudo -A rfkill block wifi &&
		sudo -A ip link set wlp2s0b1 down &&
		notify -no-id 'Wifi' 'Disabled';;
	"Wifi ")
	    sudo -A rfkill unblock wifi &&
		sudo -A ip link set wlp2s0b1 up &&
		sudo -A wpa_supplicant -B -c /etc/wpa_supplicant/wpa_supplicant.conf -i wlp2s0b1 &&
		sudo -A dhcpcd &&
		notify -no-id 'Wifi' 'Enabled';;
	"Bluetooth ")
	    sudo -A systemctl stop bluetooth &&
		sudo -A rfkill block bluetooth &&
		notify -no-id 'Bluetooth' 'Disabled' &&
		pkill blueberry;;
	"Bluetooth ")
	    sudo -A systemctl start bluetooth &&
		sudo -A rfkill unblock bluetooth &&
		notify -no-id 'Bluetooth' 'Enabled' &&
		blueberry &;;
	"Ethernet ")
	    sudo -A ip link set down dev enp3s0 &&
		notify -no-id 'Ethernet' 'Disabled';;
	"Ethernet ")
	    sudo -A ip link set up dev enp3s0 &&
		notify -no-id 'Ethernet' 'Enabled';;
	"DNS Blocking ")
	    sudo -A chattr -i /etc/hosts &&
		sudo -A rm /etc/hosts &&
		sudo -A touch /etc/hosts &&
		sudo -A chattr +i /etc/hosts &&
		notify -no-id 'DNS Blocking' 'Disabled';;
	"DNS Blocking ")
	    sudo -A chattr -i /etc/hosts &&
		sudo -A cp /etc/hosts.backup /etc/hosts &&
		sudo -A chattr +i /etc/hosts &&
		notify -no-id 'DNS Blocking' 'Enabled';;
	'Firewall')
	    case "$(menu 'entry.rasi' 'Firewall' 'on\nonl\nonld\noff\npanic\nmode')" in
		'on')
		    sudo -A firewall on &&
			notify -no-id 'Firewall' 'Mode on';;
		'onl')
		    sudo -A firewall onL &&
			notify -no-id 'Firewall' 'Mode onL';;
		'onld')
		    sudo -A firewall onLD &&
			notify -no-id 'Firewall' 'Mode onLD';;
		'off')
		    sudo -A firewall off &&
			notify -no-id 'Firewall' 'Mode off';;
		'panic')
		    sudo -A firewall panic &&
			notify -no-id 'Firewall' 'Mode PANIC';;
		'mode')
		    notify -no-id 'Firewall' "Mode $(sudo -A firewall | head --lines=1 | cut -d' ' -f2)"
	    esac;;
	"");;
	*)
	    case $(menu 'entry.rasi' 'Mode' 'Main\nIHU\nDynamic\nEncrypted') in
		'Main')
		    sudo -A systemctl stop dnscrypt-proxy.service &&
			sudo -A chattr -i /etc/resolv.conf &&
			sudo -A cp /etc/resolv.conf.main /etc/resolv.conf &&
			sudo -A chattr +i /etc/resolv.conf &&
			notify -no-id 'Resolv' 'Main';;
		'IHU')
		    sudo -A systemctl stop dnscrypt-proxy.service &&
			sudo -A chattr -i /etc/resolv.conf &&
			sudo -A cp /etc/resolv.conf.ihu /etc/resolv.conf &&
			sudo -A chattr +i /etc/resolv.conf &&
			notify -no-id 'Resolv' 'IHU';;
		'Dynamic')
		    sudo -A systemctl stop dnscrypt-proxy.service &&
			sudo -A chattr -i /etc/resolv.conf &&
			sudo -A rm /etc/resolv.conf &&
			sudo -A resolvconf -u &&
			notify -no-id 'Resolv' 'Dynamic';;
		'Encrypted')
		    sudo -A systemctl start dnscrypt-proxy.service &&
			sudo -A chattr -i /etc/resolv.conf &&
			sudo -A cp /etc/resolv.conf.encrypt /etc/resolv.conf &&
			sudo -A chattr +i /etc/resolv.conf &&
			notify -no-id 'Resolv' 'Encrypted';;
	    esac;;
    esac
}

function actions {
    case "$(menu 'panel.rasi' 'Actions' 'Lock\nSleep\nHibernate\nReboot\nPoweroff\nVPN')" in
	'Lock')
	    Lock --bg;;
	'Sleep')
	    if menu -yn 'Sleep'; then
		if (curl 192.168.123.200 | grep -e '?comRelay3=on') >/dev/null; then
		    (curl 192.168.123.200/'?comRelay3=on') >/dev/null &&
			lock --bg &&
			systemctl suspend
		    sleep 1 &&
			(curl 192.168.123.200 | grep -e '?comRelay3=off') >/dev/null &&
			(curl 192.168.123.200/'?comRelay3=off') >/dev/null
		else
		    lock --bg &&
			systemctl suspend
		fi
	    fi;;
	'Hibernate')
	    if menu -yn 'Hibernate'; then
		lock --bg &&
		    systemctl hibernate
	    fi;;
	'Reboot')
	    if menu -yn 'Reboot'; then
		reboot;
	    fi;;
	'Poweroff')
	    if menu -yn 'Poweroff'; then
		poweroff;
	    fi;;
	'VPN')
	    location="$HOME/.config/vpn/"
	    options=""
    
	    cd "$location"
	    for file in *; do
		options+="$file"
		options+="\n"
	    done
    
	    option="$(menu 'entry.rasi' 'Select VPN' "$options")"
	    [[ $option != "" ]] && xterm -background black -foreground white -e "cd $location && sudo -A openvpn '$option'"
    esac
}

function services {
    ssh=`systemctl status sshd > /dev/null && echo SSH  || echo SSH `
    vftp=`systemctl status vsftpd > /dev/null && echo VFTP  || echo VFTP `
    dhcp=`systemctl status dhcpcd > /dev/null && echo DHCP  || echo DHCP `
    emby=`systemctl status emby-server.service > /dev/null && echo Emby  || echo "Emby "`
    docker=`systemctl status docker > /dev/null && echo "Docker " || echo "Docker "`
    mic=`pactl list | grep loopback > /dev/null && echo MIC  || echo MIC `

    case $(menu 'entry.rasi' 'Services' "$ssh\n$vftp\n$dhcp\n$emby\n$docker\n$mic") in
	'SSH ')
	    sudo -A systemctl stop sshd &&
		notify -no-id 'SSHD' 'Disabled';;
	'SSH ')
	    sudo -A systemctl start sshd &&
		notify -no-id 'SSHD' 'Enabled';;
	'VFTP ')
	    sudo -A systemctl stop vsftpd &&
		notify -no-id 'VFTP' 'Disabled';;
	'VFTP ')
	    sudo -A systemctl start vsftpd &&
		notify -no-id 'VFTP' 'Enabled';;
	'DHCP ')
	    sudo -A systemctl stop dhcpcd &&
		notify -no-id 'DHCP' 'Disabled';;
	'DHCP ')
	    sudo -A systemctl start dhcpcd &&
		notify -no-id 'DHCP' 'Enabled';;
	'Emby ')
	    sudo -A systemctl stop emby-server.service &&
		notify -no-id 'Emby' 'Disabled';;
	'Emby ')
	    sudo -A systemctl start emby-server.service &&
		notify -no-id 'Emby' 'Enabled';;
	'Docker ')
	    sudo -A systemctl stop docker &&
		sudo -A systemctl stop docker.socket &&
		notify -no-id 'Docker' 'Disabled';;
	'Docker ')
	    sudo -A systemctl start docker &&
		notify -no-id 'Docker' 'Enabled';;
	'MIC ')
		pactl unload-module module-loopback &&
		    notify -no-id 'MIC' 'Disabled';;
	'MIC ')
		pactl load-module module-loopback latency_msec=1 &&
		    notify -no-id 'MIC' 'Enabled';;
    esac
}

function settings {
    case $(menu 'entry.rasi' 'Settings' 'Wallpaper\nWallpaper Vertical\nWallpaper (Scale)\nLock Screen\nChameleon\nChameleon Themes') in
	'Wallpaper')
	    wallpaper=`cd ~/Pictures && find Wallpapers -type f | sed 's/^Wallpapers.//g'`
	    wallpaper=`menu 'entry.rasi' 'Select wallpaper' "$wallpaper"` &&
		feh --bg-fill ~/Pictures/Wallpapers/"$wallpaper";;
	'Wallpaper Vertical')
	    wallpaper=`cd ~/Pictures && find Wallpapers -type f | sed 's/^Wallpapers.//g'`
	    wallpaper=`menu 'entry.rasi' 'Select wallpaper' "$wallpaper"` &&
		echo "#!/bin/sh" > ~/.fehbgr &&
		echo "feh --no-fehbg --bg-fill $HOME/Pictures/Wallpapers/$wallpaper" >> ~/.fehbgr;;
	'Wallpaper (Scale)')
	    wallpaper=`cd ~/Pictures && find Wallpapers -type f | sed 's/^Wallpapers.//g'`
	    wallpaper=`menu 'entry.rasi' 'Select wallpaper' "$wallpaper"` &&
		feh --bg-scale ~/Pictures/Wallpapers/"$wallpaper";;
	'Lock Screen')
	    wallpaper=`cd ~/Pictures && find Wallpapers -type f | sed 's/^Wallpapers.//g'`
	    wallpaper=`menu 'entry.rasi' 'Select wallpaper' "$wallpaper"` &&
		echo "$HOME/Pictures/Wallpapers/$wallpaper" > ~/.lockbg;;
	'Chameleon')
	    wallpaper=`cd ~/Pictures && find Wallpapers -type f | sed 's/^Wallpapers.//g'`
	    wallpaper=`menu 'entry.rasi' 'Select wallpaper' "$wallpaper"` &&
		chameleon ~/Pictures/Wallpapers/"$wallpaper";;
	'Chameleon Themes')
	    theme="$(menu 'entry.rasi' 'Themes' "$(chameleon -l)")" &&
		chameleon -t "$theme";;
    esac
}

case "$#" in
    0)
	case $(menu 'menu.rasi' 'Neos' 'Control Panel\nActions\nServices\nSettings') in
	    'Control Panel')
		control_panel;;
	    'Actions')
		actions;;
	    'Services')
		services;;
	    'Settings')
		settings;;
	esac;;
    1)
	if [ "$1" == "-h" ]; then
	    echo "$help"
	else
	    echo "error: not valid argument" 1>&2
	    exit 1
	fi;;
    *)
	echo "error: no arguments or too many arguments" 1>&2
	exit 1;;
esac

