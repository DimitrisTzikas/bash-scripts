#!/bin/sh

###########################################################
#
# Simple Alarm
#
# Written by Dimitri Tzika
#
# Synopsis: wakeup
#
# Arguments:
#
# Examples:
# wakeup
#
###########################################################

# Variables for custom options
time=0
music=""
musicWithCmus=""
light=""

# Functions
waitDots(){
    for dot in "." "." "."; do
	    sleep 1; printf "%s" "$dot"
    done; clear
}

 startAlarm(){
     # Check if light control is empty and if it is give default value from the file
     [ "$light" = "" ] && { grep 'Light: on' "$HOME/.wakeup" > /dev/null && light="on" || light="off"; }

     # Check if musicWithCmus and music are empty and if they are, give the default value from the file
     if [ "$musicWithCmus" = "" ] && [ "$music" == "" ]; then
        music="$(grep 'MusicAction' "$HOME/.wakeup" | cut -d ':' -f 2 | tr -d ' ')"
    elif [ "$musicWithCmus" -eq 1 ]; then
        music="cmus"
    else
        # Ask for custom command
        echo "Custom command not ready."
    fi

    # Check if specified time is today or tomorrow
    desiredTime=$(date +%s -d "$time")
    [ $(date +%s) -gt "$desiredTime" ] && desiredTime=`expr "$desiredTime" + 86400`

    # Set RTC wakeup time
    printf "Wakeup set at: "
    sudo rtcwake -m no -t "$desiredTime" | cut -d ' ' -f 6-10 | tr -d '\n'
    waitDots

    # Execute after suspend
    {
        sleep 5
        systemctl suspend && sleep 10

        # Kill alarm actions
        termite -e "bash -c \"echo 'Press <enter> to stop the alarm' && read -r && pkill wakeup\"" > /dev/null 2 > /dev/null &

        # Check if light control is enabled
        [ "$light" = "on" ] && { sleep 15 && curl 192.168.123.200/?comRelay4=off; sleep 5 && curl 192.168.123.200/?comRelay2=off; sleep 60 && curl 192.168.123.200/?comRelay3=off; } 2>/dev/null &

        # Check if music is enabled
        if [ "$music" != "0" ]; then
            # Turn on speakers
            sleep 5 && curl 192.168.123.200/?comRelay1=off && sleep 5
            # Check what to use, cmus or custom command
            [ "$music" = "cmus" ] && cmus-remote -u || $music &
            # Increase volume
            pactl set-sink-mute "$(pactl info | grep 'Default Sink: ' | cut -d' ' -f3)" false
	    	for volume in {30..50}; do
				sleep 8; pactl set-sink-volume "$(pactl info | grep 'Default Sink: ' | cut -d' ' -f3)" "$volume"%
	    	done
        fi
    } > /dev/null & disown -h %1
 }

# Clean screen
clear

# Errors
if [ "$#" -ge 4 ]; then
    echo "Error too many arguments" 1>&2; exit 1
# Settings menu
elif [ "$#" -eq 1 ] && [ "$1" = settings ] || [ "$1" = s ]; then
    # Create settings file if doesn't exists
    [ ! -s "$HOME/.wakeup" ] && printf "# This file contains settings for the wakeup command\nTimeToWakeup: 00:00\nMusicAction: cmus\nLight: on\n" > "$HOME/.wakeup"
    # Menu
    doNotExit=true
    while "$doNotExit"; do
        clear
        # Show options
        printf "Settings Menu\n\t|Q.Exit|\n\t|1.Change default time|\n\t|2.Change default music action|\n\t|3.Control lights|\n\t|4.See Settings|\n"
        echo -n "Select an option "
        read -r userOption
        case "$userOption" in
            # Exit
            [qQ]) clear; exit;;
            # Change default time
            1) clear
                until
                    [ -z "$given" ] || (printf "Not valid time" 1>&2; waitDots)
                    printf "Set time(HH:MM): "
                    read -r given
                date -d "$given" > /dev/null 2>&1 && [[ "$given" = ??:?? ]]; do :; done
                # Save changed time to file
	            sed -i -r "s/[0-9]{2}:[0-9]{2}/$given/" "$HOME/.wakeup"
                given="";;
            # Change default music action
            2) clear
                printf "Select an option\n\t|1.Cmus|\n\t|2.Custom command|\nSelect an option: "
	            read -r given
	            case "$given" in
                    1) sed -i -r "s/MusicAction: .*/MusicAction: cmus/" "$HOME/.wakeup";;
                    2) given="n"
                        while [ "$given" != y ] && [ "$given" != yes ]; do
			                clear
			                printf "Enter the custom command: "
			                read -r customCommand
			                printf "Are you sure?(y/n) "
			                read -r given
		                done
                        # Save changed music action to file
		                sed -i -r "s/MusicAction: .*/MusicAction: $customCommand/" "$HOME/.wakeup";;
                    *) printf "Not valid option" 1>&2; waitDots
                esac;;
            # Control lights
            3) clear
                while
                    [ -z "$given" ] || (printf "Not valid option" 1>&2; waitDots)
                    printf "Set Light control(on/off): "
                    read -r given
                [ "$given" != "on" ] && [ "$given" != "off" ]; do :; done
                # Save changed option to file
                sed -i -r "s/Light: [a-z]{2,3}/Light: $given/" "$HOME/.wakeup"
                given="";;
            # See settings
            4) clear
                tail -3 < "$HOME/.wakeup"
                echo "To go back press <enter>"
                read -r;;
            *) printf "Not valid option" 1>&2; waitDots
        esac
    done
    exit
# Use settings from file if exists.
elif [ "$#" -eq 0 ]; then
    # Check if file exists
    [ -s "$HOME/.wakeup" ] && { startAlarm; exit; } || { echo "No file found." 2>&1; exit 1; }
# Use given settings
else
    # Set off
    music=0
    musicWithCmus=0
    light="off"
    
    # Iterate over arguments
    for argument in "$@"; do
        case "$argument" in
            # Check if time is correct
            *:*) { date -d "$argument" > /dev/null 2>&1 && [[ "$argument" = ??:?? ]]; } && time="$argument" || { echo "Not valid time" 1>&2; exit 1; };;
            m) music=1;;
            mc) musicWithCmus=1;;
            l) light="on";;
            *) echo "Not valid option." 1>&2; exit 1
        esac
    done
    # Check for conflicted optionsn
    { [ "$music" -eq 1 ] && [ "$musicWithCmus" -eq 1 ]; } && { printf "Conflicted options:\n\tYou can't have Music and Music with cmus enabled\n" 1>&2; exit 1; }
    startAlarm
fi